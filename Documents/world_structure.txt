MINECRAFT WII U WORLD SAVE FILE STRUCTURE

This has been a devastating challenge for me to reverse engineer the complete structure of the Minecraft Wii U World save file, since the whole thing is just binary, I'm forced to dissect the Hex and see for anything, maybe sometimes even need to look ingame to try to test changes to see what's what.

Description: These files don't come with an file extension, untouched are just the plain world ID. This file contains the full world data, blocks, chunks, entities, inventory, items, etc.

MAIN-STRUCTURE
-----------------------
Hex Analysis and other.
-----------------------

ENTRY: 0x0 to 0x5 - The MAGIC Bytes for the save files. This entry point has 2 variants. One being that if the world is created standard, no mashup worlds selected, the last byte of the entry point would be 00 (Hex View), but if the world was created from like a tutorial world, which then contains gamerules, the last byte would be 01 (Hex View).

ZLIB COMPRESSION ON FRONT: 0x8 - Each save file has a ZLIB header at 0x8, this in hex is 78 9C. All other instances of 78 9C are not ZLIB headers, so this proves that the game saves are compressed, and looking into MCCToolChest's application extensions, we can see a .dll file named ZLib.dll, which gives us an easier approach to looking inside of these files, I have included a python script if you want to use it to extract the contents into a bin file.

Decompressed Save - The decompressed save file will contain binary and readable filename strings, these strings vary on which world but every one of them contains a level.dat file. Though extracting these is hard work since you need to find direct what file is what and where, luckily some like level.dat, Villages.dat, EndCity.dat and others are easily visible but .mcr files are harder to find from their encrypted binary content, I may cover this another time. So continuing, luckily which some timewaster I am *lol*, I've made a python script that can look for these files and extract it into their files. You can view the source anytime, I'm not keeping anything secret, but lets go more into depth.

File Structures and Extraction - Though .mcr files seem to have a 'complicated to figure out' header, since the header or MAGIC for the mcr files are just a giant lump of just the space character or 00 in hex, It's hard to figure out since the magic for each one seems to be different for each one before going into Zlib compression, Oh speaking of Zlib, .mcr files are compressed with Zlib, I found this out by accidently decompressing a binary blob inside of the decompressed save file before I found out most of the stuff like level.dat and other were unencrypted. Another thing, any binary inside of clear unencrypted files like level.dat are stuff that the game reads, editing it and then trying it in-game will make the game probably crash or the world won't work. For some info on some of the files, the entry point or MAGIC bytes for the .dat files are 0A 00 00 0A 00 04 (Hex View). This entry magic header is also known as a Tag_Compound. Tag_Compound files or (.dat) files that are from the save file can be viewed using an NBTEditor or viewer, for example NBTExplorer, if it's a valid file, it can open it and you can edit contents from it instead of breaking the binary from inside, also not all of them have a magic of 0A 00 00 0A 00 04, for example the player magic is actually 0A 00 00 03 00 0E, which makes it different from the other Tag_Compounds. A little more info for the tag compounds are, even if the file has other stuff like characters or binary that isn't associated with the compound. As long as the tag compound ends with a Tag_End header and a correct file structure, NBTEditors won't care about other file contents, it just looks for a verified structure anywhere in the file. The MCR files magic is 00 0C literally starting as the entry point for it, (obviously). Also MCR files are just chunks and stuff where all like blocks and entities were stored, I'm soon going to view and try to make it extractable and readable.

This is my best take for this structure, you can use my `tag_extractor.py` tool inside of the scripts folder inside of the repo. No more hiding any secrets UMT or MCCToolChest. Enjoy.